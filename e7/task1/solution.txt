Observations: An atomic is faster compared to a mutex. 

Atomic: 
real	0m0.216s
user	0m0.680s
sys	0m0.044s

Atomic o3: 
	User time (seconds): 0.67
	System time (seconds): 0.04
	Percent of CPU this job got: 351%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.20
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 9100
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 2344
	Voluntary context switches: 1842
	Involuntary context switches: 6
	Swaps: 0
	File system inputs: 0
	File system outputs: 0
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 0

Mutex o3: 
	User time (seconds): 1.34
	System time (seconds): 1.68
	Percent of CPU this job got: 371%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.81
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 9100
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 2343
	Voluntary context switches: 123418
	Involuntary context switches: 64
	Swaps: 0
	File system inputs: 24
	File system outputs: 0
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 0

As you can tell from the results, the main difference between these two methods are, 
how mutex and atomic work. 
Mutex locks the thread and passes the control to the os with a context switch. Atomics instead try to access/modify the value unless they are finally able to.
