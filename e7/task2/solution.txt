//USE_MY_MUTEX=1

Consumer 0 sum: 5025638
Consumer 1 sum: 4974362
Final sum: 10000000
        Command being timed: "./task2"
        User time (seconds): 11.79
        System time (seconds): 0.00
        Percent of CPU this job got: 299%
        Elapsed (wall clock) time (h:mm:ss or m:ss): 0:03.94
        Average shared text size (kbytes): 0
        Average unshared data size (kbytes): 0
        Average stack size (kbytes): 0
        Average total size (kbytes): 0
        Maximum resident set size (kbytes): 2820
        Average resident set size (kbytes): 0
        Major (requiring I/O) page faults: 1
        Minor (reclaiming a frame) page faults: 348
        Voluntary context switches: 19
        Involuntary context switches: 0
        Swaps: 0
        File system inputs: 40
        File system outputs: 0
        Socket messages sent: 0
        Socket messages received: 0
        Signals delivered: 0
        Page size (bytes): 4096
        Exit status: 0


//USE_MY_MUTEX=0

Consumer 0 sum: 5254930
Consumer 1 sum: 4745070
Final sum: 10000000
        Command being timed: "./task2"
        User time (seconds): 2.22
        System time (seconds): 2.78
        Percent of CPU this job got: 233%
        Elapsed (wall clock) time (h:mm:ss or m:ss): 0:02.14
        Average shared text size (kbytes): 0
        Average unshared data size (kbytes): 0
        Average stack size (kbytes): 0
        Average total size (kbytes): 0
        Maximum resident set size (kbytes): 2228
        Average resident set size (kbytes): 0
        Major (requiring I/O) page faults: 1
        Minor (reclaiming a frame) page faults: 194
        Voluntary context switches: 232394
        Involuntary context switches: 3
        Swaps: 0
        File system inputs: 40
        File system outputs: 0
        Socket messages sent: 0
        Socket messages received: 0
        Signals delivered: 0
        Page size (bytes): 4096
        Exit status: 0


A user-mode spinlock IS NEVER more efficient than a lock that the OS provides.
The reason is simple, that OS locks are wired to the OS scheduler. So if a lock tries to lock a lock and fails - 
the OS knows to freeze this thread and not reschedule it to run until the lock has been released.

With user-mode spinlocks, this doesn't happen. The OS can't know that the relevant thread tries to acquire to the lock in a tight loop.
Yielding is just a patch and not a solution - we want to spin for a short time, then go to sleep until the lock is released. With user mode spin locks,
we might waste the entire thread quantum trying to lock the spinlock and yielding.

https://stackoverflow.com/questions/66194016/can-stdatomic-be-used-sometimes-instead-of-stdmutex-in-c
